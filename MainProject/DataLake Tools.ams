## ams_version=1.0

Model Main_DataLake_Tools {
	Section Calendars {
		Calendar c_days {
			Index: i_day;
			Unit: minute;
			BeginDate: sp_def_beginCalendar;
			EndDate: sp_def_endCalendar;
			TimeslotFormat: "%c%y-%m-%dT%H:%M:00Z";
		}
		StringParameter sp_def_beginCalendar {
			Definition: {
				MomentToString(
				    Format        :  "%c%y-%m-%d %H:%M",
				    unit          :  day,
				    ReferenceDate :  CurrentToString("%c%y-%m-%d"),
				    Elapsed       :  -3[day]);
			}
		}
		StringParameter sp_def_endCalendar {
			Definition: {
				MomentToString(
				    Format        :  "%c%y-%m-%d %H:%M",
				    unit          :  day,
				    ReferenceDate :  CurrentToString("%c%y-%m-%d"),
				    Elapsed       :  +150[day]);
			}
		}
	}
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: {
				minute->s : #-># * 60,
				hour->s : #-># * 3600,
				month->s : #-># * 2628000,
				day->s : #-># * 86400,
				year->s : #-># * 31536000
			}
		}
	}
	Section Manage_File_System {
		Set s_fileSystems {
			Index: i_file_sys;
		}
		ElementParameter ep_fileSystem {
			Range: s_fileSystems;
		}
		StringParameter sp_fileSystem;
		Parameter p_def_existingFileSystems {
			IndexDomain: i_file_sys;
			Definition: 1;
			webui::FlagsIdentifier: sp_def_readonly;
		}
		Procedure pr_fetchFileSystems {
			Body: {
				dex::dls::ListFileSystems(s_fileSystems);
				empty ep_fileSystem;
			}
		}
		Procedure pr_createFileSystem {
			Body: {
				dex::dls::CreateFileSystem(StringToLower(sp_fileSystem));
				pr_fetchFileSystems;
				ep_fileSystem := StringToElement(s_fileSystems, sp_fileSystem);
				empty sp_fileSystem, ep_fileSystem;
			}
		}
		Procedure pr_deleteSelectedFileSystems {
			Body: {
				if (ep_fileSystem) then
					dex::dls::DeleteFileSystem(ep_fileSystem);
					pr_fetchFileSystems;
					empty ep_fileSystem;
				endif;
			}
		}
	}
	Section Container_SAS_Token {
		Section Create_Access_Policy {
			ElementParameter ep_inputFileSystem_Create {
				Range: s_fileSystems;
				webui::UponChangeProcedure: pr_uponChangeFileSystem_Create;
			}
			StringParameter sp_inputAccessPolicy_Create;
			ElementParameter ep_inputStartDate_Create {
				Range: c_days;
			}
			ElementParameter ep_inputExpiryDate_Create {
				Range: c_days;
			}
			Parameter bp_svc_inputPermissionPossibilities_Create {
				IndexDomain: i_svc_perm;
				Range: binary;
				webui::TooltipIdentifier: sp_svc_permissionTooltip(i_svc_perm);
			}
			Procedure pr_uponChangeFileSystem_Create {
				Body: {
					
					pr_getAccessPolicies(ep_in_fileSystem : ep_inputFileSystem_Create);
					
					empty sp_inputAccessPolicy_Create, 
					    ep_inputStartDate_Create, 
					    ep_inputExpiryDate_Create, 
					    bp_svc_inputPermissionPossibilities_Create;
					
					! Update Create
					empty Update_Access_Policy;
					
					! Update Delete
					empty Delete_Access_Policy;
					
					! Update Token
					empty bp_svc_accessPolicyPermissionPossibilities,
					        ep_svc_accessPolicyStartDate,
					        ep_svc_accessPolicyExpiryDate,
					        ep_svc_fileSystem,
					        ep_svc_accessPolicy,
					        p_svc_daysToExpire,
					        ep_svc_startDate,
					        ep_svc_expiryDate;
				}
			}
			Procedure pr_createAccessPolicy {
				Body: {
					s_loc_actions := {'OK'};
					
					if (card(s_storedAccessPolicies) < 5 
					        and ep_inputFileSystem_Create
					        and sp_inputAccessPolicy_Create
					        and ep_inputStartDate_Create
					        and ep_inputExpiryDate_Create
					        and exists(i_svc_perm | bp_svc_inputPermissionPossibilities_Create(i_svc_perm))) then
					
						SetElementAdd(s_storedAccessPolicies, ep_pol, sp_inputaccessPolicy_Create);
						empty sp_policyPermission(ep_pol), sp_policyStart(ep_pol), sp_policyEnd(ep_pol);
					
					    for i_svc_perm | bp_svc_inputPermissionPossibilities_Create(i_svc_perm) do 
					        sp_policyPermission(ep_pol) += i_svc_perm;
					    endfor;    
					
						sp_policyStart(ep_pol) := ep_inputStartDate_Create;
						sp_policyEnd(ep_pol) := ep_inputExpiryDate_Create;
					
						pr_setAccessPolicies(ep_in_fileSystem :  ep_inputFileSystem_Create);
					
					    webui::RequestPerformWebUIDialog(
					        title   :  "Create Access Policy", 
					        message :  "Sucessfully created access policy.", 
					        actions :  s_loc_actions, 
					        onDone  :  'webui::NoOp1');
					
					    empty ep_inputFileSystem_Create,
					        sp_inputAccessPolicy_Create,
					        ep_inputStartDate_Create,
					        ep_inputExpiryDate_Create,
					        bp_svc_inputPermissionPossibilities_Create;
					
					else 
					
					    webui::RequestPerformWebUIDialog(
					        title   :  "Missing Information", 
					        message :  "Please input all fields.", 
					        actions :  s_loc_actions, 
					        onDone  :  'webui::NoOp1');
					endif;
				}
				Set s_loc_actions;
			}
		}
		Section Update_Access_Policy {
			ElementParameter ep_inputFileSystem_Update {
				Range: s_fileSystems;
				webui::UponChangeProcedure: pr_uponChangeFileSystem_Update;
			}
			ElementParameter ep_inputAccessPolicy_Update {
				Range: s_storedAccessPolicies;
				webui::UponChangeProcedure: pr_uponChangeAccessPolicy_Update;
			}
			ElementParameter ep_inputStartDate_Update {
				Range: c_days;
			}
			ElementParameter ep_inputExpiryDate_Update {
				Range: c_days;
			}
			Parameter bp_svc_inputPermissionPossibilities_Update {
				IndexDomain: i_svc_perm;
				Range: binary;
				webui::TooltipIdentifier: sp_svc_permissionTooltip(i_svc_perm);
			}
			Procedure pr_uponChangeFileSystem_Update {
				Body: {
					
					pr_getAccessPolicies(ep_in_fileSystem : ep_inputFileSystem_Update);
					
					empty ep_inputAccessPolicy_Update, 
					        ep_inputStartDate_Update, 
					        ep_inputExpiryDate_Update, 
					        bp_svc_inputPermissionPossibilities_Update;
					
					! Update Create
					empty Create_Access_Policy;
					
					! Update Delete
					empty Delete_Access_Policy;
					
					! Update Token
					empty bp_svc_accessPolicyPermissionPossibilities,
					        ep_svc_accessPolicyStartDate,
					        ep_svc_accessPolicyExpiryDate,
					        ep_svc_fileSystem,
					        ep_svc_accessPolicy,
					        p_svc_daysToExpire,
					        ep_svc_startDate,
					        ep_svc_expiryDate;
				}
			}
			Procedure pr_uponChangeAccessPolicy_Update {
				Body: {
					if (ep_inputAccessPolicy_Update) then
					
						p_loc_permissionLength := StringLength(sp_policyPermission(ep_inputAccessPolicy_Update));
						empty bp_svc_inputPermissionPossibilities_Update, ep_inputStartDate_Update, ep_inputExpiryDate_Update;
					
						sp_loc_startDate := SubString(sp_policyStart(ep_inputAccessPolicy_Update), 1, 19) + "Z";
						sp_loc_expiryDate := SubString(sp_policyEnd(ep_inputAccessPolicy_Update), 1, 19) + "Z";
					
						ep_inputStartDate_Update := StringToElement(c_days, sp_loc_startDate, 0);
						ep_inputExpiryDate_Update := StringToElement(c_days, sp_loc_expiryDate, 0);
					
						while (LoopCount <= p_loc_permissionLength) do
							sp_loc_permission := SubString(sp_policyPermission(ep_inputAccessPolicy_Update), LoopCount, LoopCount);
							for (i_svc_perm | i_svc_perm = sp_loc_permission) do
								bp_svc_inputPermissionPossibilities_Update(i_svc_perm) := 1;
							endfor;
						endwhile;
					
					elseif not ep_inputAccessPolicy_Update then
					
						empty bp_svc_inputPermissionPossibilities_Update, 
						    ep_inputStartDate_Update, 
						    ep_inputExpiryDate_Update;
					
					endif;
				}
				Parameter p_loc_permissionLength;
				StringParameter sp_loc_permission;
				StringParameter sp_loc_startDate;
				StringParameter sp_loc_expiryDate;
			}
			Procedure pr_updateAccessPolicy {
				Body: {
					s_loc_actions := {'OK'};
					
					if (ep_inputFileSystem_Update
					        and ep_inputAccessPolicy_Update
					        and ep_inputStartDate_Update
					        and ep_inputExpiryDate_Update
					        and exists(i_svc_perm | bp_svc_inputPermissionPossibilities_Update(i_svc_perm))) then
					
						empty sp_policyPermission(ep_inputAccessPolicy_Update);
					
					    for i_svc_perm | bp_svc_inputPermissionPossibilities_Update(i_svc_perm) do 
					        sp_policyPermission(ep_inputAccessPolicy_Update) += i_svc_perm;
					    endfor;    
					
						sp_policyStart(ep_inputAccessPolicy_Update) := ep_inputStartDate_Update;
						sp_policyEnd(ep_inputAccessPolicy_Update) := ep_inputExpiryDate_Update;
					
						pr_setAccessPolicies(ep_in_fileSystem :  ep_inputFileSystem_Update);
					
					    webui::RequestPerformWebUIDialog(
					        title   :  "Update Access Policy", 
					        message :  "Sucessfully updated access policy.", 
					        actions :  s_loc_actions, 
					        onDone  :  'webui::NoOp1');
					
					    empty ep_inputFileSystem_Update,
					        ep_inputAccessPolicy_Update,
					        ep_inputStartDate_Update,
					        ep_inputExpiryDate_Update,
					        bp_svc_inputPermissionPossibilities_Update;
					
					else 
					
					    webui::RequestPerformWebUIDialog(
					        title   :  "Missing Information", 
					        message :  "Please input all fields.", 
					        actions :  s_loc_actions, 
					        onDone  :  'webui::NoOp1');
					endif;
				}
				ElementParameter ep_loc_initialPol {
					Range: s_storedAccessPolicies;
				}
				Set s_loc_actions;
			}
		}
		Section Delete_Access_Policy {
			ElementParameter ep_inputFileSystem_Delete {
				Range: s_fileSystems;
				webui::UponChangeProcedure: pr_uponChangeFileSystem_Delete;
			}
			ElementParameter ep_inputAccessPolicy_Delete {
				Range: s_storedAccessPolicies;
			}
			Procedure pr_uponChangeFileSystem_Delete {
				Body: {
					
					pr_getAccessPolicies(ep_in_fileSystem : ep_inputFileSystem_Delete);
					
					empty ep_inputAccessPolicy_Delete;
					
					! Update Create
					empty Create_Access_Policy;
					
					! Update Update
					empty Update_Access_Policy;
					
					! Update Token
					empty bp_svc_accessPolicyPermissionPossibilities,
					        ep_svc_accessPolicyStartDate,
					        ep_svc_accessPolicyExpiryDate,
					        ep_svc_fileSystem,
					        ep_svc_accessPolicy,
					        p_svc_daysToExpire,
					        ep_svc_startDate,
					        ep_svc_expiryDate;
				}
			}
			Procedure pr_deleteAccessPolicy {
				Body: {
					s_loc_actions := {'OK'};
					
					if (ep_inputFileSystem_Delete and ep_inputAccessPolicy_Delete) then
					
						s_storedAccessPolicies -= ep_inputAccessPolicy_Delete;
						pr_setAccessPolicies(ep_in_fileSystem :  ep_inputFileSystem_Delete);
					
					    empty ep_inputFileSystem_Delete;
					
					    webui::RequestPerformWebUIDialog(
					        title   :  "Delete Access Policy", 
					        message :  "Sucessfully deleted the access policy.", 
					        actions :  s_loc_actions, 
					        onDone  :  'webui::NoOp1');
					
					else 
					
					    webui::RequestPerformWebUIDialog(
					        title   :  "Missing Information", 
					        message :  "Please input all fields.", 
					        actions :  s_loc_actions, 
					        onDone  :  'webui::NoOp1');
					endif;
				}
				Set s_loc_actions;
			}
		}
		Set s_service_permissions {
			Index: i_svc_perm;
			Parameter: ep_svc_permission;
			Definition: data { r, a, c, w, d, x, y, l, t, f, m, e, o, p, i };
			Comment: {
				"\"r\" (Read)
				\"a\" (Add)
				\"c\" (Create)
				\"w\" (Write)
				\"d\" (Delete)
				\"x\" (Delete Version)
				\"y\" (Permanent Delete)
				\"l\" (List)
				\"t\" (Tags)
				\"f\" (Find)
				\"m\" (Move)
				\"e\" (Execute)
				\"o\" (Ownership)
				\"p\" (Permissions)
				\"i\" (SetImmutabiltyPolicy)"
			}
		}
		Parameter bp_svc_accessPolicyPermissionPossibilities {
			IndexDomain: i_svc_perm;
			Range: binary;
			webui::TooltipIdentifier: sp_svc_permissionTooltip(i_svc_perm);
		}
		ElementParameter ep_svc_accessPolicyStartDate {
			Range: c_days;
			webui::UponChangeProcedure: pr_svc_uponChangeStartDate;
		}
		ElementParameter ep_svc_accessPolicyExpiryDate {
			Range: c_days;
			webui::UponChangeProcedure: pr_svc_uponChangeExpiryDate;
		}
		ElementParameter ep_svc_fileSystem {
			Range: s_fileSystems;
			webui::UponChangeProcedure: pr_svc_uponChangeFileSystem;
		}
		ElementParameter ep_svc_accessPolicy {
			Range: s_storedAccessPolicies;
			webui::UponChangeProcedure: pr_svc_uponChangeAccessPolicy;
		}
		Parameter p_svc_daysToExpire {
			Unit: day;
			webui::UponChangeProcedure: pr_svc_uponChangeDaysToExpire;
		}
		ElementParameter ep_svc_startDate {
			Range: c_days;
			webui::UponChangeProcedure: pr_svc_uponChangeStartDate;
		}
		ElementParameter ep_svc_expiryDate {
			Range: c_days;
			webui::UponChangeProcedure: pr_svc_uponChangeExpiryDate;
		}
		StringParameter sp_containerSASQueryString {
			webui::FlagsIdentifier: sp_def_readonly;
		}
		StringParameter sp_containerSASURL;
		Procedure pr_createContainerSASQuery {
			Body: {
				if ep_svc_fileSystem
				        and ep_svc_accessPolicy
				        and p_svc_daysToExpire
				        and ep_svc_expiryDate
				        and ep_svc_expiryDate then
				
					for i_svc_perm | bp_svc_accessPolicyPermissionPossibilities(i_svc_perm) do 
						sp_loc_permission += i_svc_perm;
					endfor;    
				
				    dex::dls::GetContainerSASQueryString(
				       	accountName		   : 'default', 
				        queryString        :  sp_containerSASQueryString, 
				        fileSystem         :  ep_svc_fileSystem, 
				        permissions        :  sp_loc_permission, 
				        expiry             :  p_svc_daysToExpire,
				        storedAccessPolicy :  ep_svc_accessPolicy);
				
				    sp_containerSASURL :=  FormatString("https://%s.blob.core.windows.net/%e?%s", dex::dls::StorageAccount, ep_svc_fileSystem, sp_containerSASQueryString);
				
				    webui::RequestPerformWebUIDialog(
				        title   :  "Container SAS Token", 
				        message :  "Sucessfully created a new container SAS token.", 
				        actions :  s_loc_actions, 
				        onDone  :  'webui::NoOp1');
				
				else 
				
				    webui::RequestPerformWebUIDialog(
				        title   :  "Missing Information", 
				        message :  "Please input all fields.", 
				        actions :  s_loc_actions, 
				        onDone  :  'webui::NoOp1');
				
				endif;
			}
			StringParameter sp_loc_permission;
			Set s_loc_actions;
		}
		Procedure pr_svc_uponChangeFileSystem {
			Body: {
				
				pr_getAccessPolicies(ep_in_fileSystem : ep_svc_fileSystem);
				
				empty ep_svc_accessPolicy, p_svc_daysToExpire, 
				    ep_svc_startDate, ep_svc_expiryDate;
				
				pr_svc_uponChangeAccessPolicy;
				
				! Update Create
				empty Create_Access_Policy;
				
				! Update Update
				empty Update_Access_Policy;
				
				! Update Delete
				empty Delete_Access_Policy;
			}
		}
		Procedure pr_svc_uponChangeAccessPolicy {
			Body: {
				if (ep_svc_accessPolicy) then
				
					p_loc_permissionLength := StringLength(sp_policyPermission(ep_svc_accessPolicy));
				
					empty bp_svc_accessPolicyPermissionPossibilities, p_svc_daysToExpire, 
					    ep_svc_startDate, ep_svc_expiryDate,
					    ep_svc_accessPolicyStartDate, ep_svc_accessPolicyExpiryDate;
				
					sp_loc_startDate := SubString(sp_policyStart(ep_svc_accessPolicy), 1, 19) + "Z";
					sp_loc_expiryDate := SubString(sp_policyEnd(ep_svc_accessPolicy), 1, 19) + "Z";
				
					ep_svc_accessPolicyStartDate := StringToElement(c_days, sp_loc_startDate, 0);
					ep_svc_accessPolicyExpiryDate := StringToElement(c_days, sp_loc_expiryDate, 0);
				
					while (LoopCount <= p_loc_permissionLength) do
						sp_loc_permission := SubString(sp_policyPermission(ep_svc_accessPolicy), LoopCount, LoopCount);
						for (i_svc_perm | i_svc_perm = sp_loc_permission) do
							bp_svc_accessPolicyPermissionPossibilities(i_svc_perm) := 1;
						endfor;
					endwhile;
				
				elseif not ep_svc_accessPolicy then
				
					empty bp_svc_accessPolicyPermissionPossibilities, 
					    p_svc_daysToExpire,
					    ep_svc_startDate, 
					    ep_svc_expiryDate,
					    ep_svc_accessPolicyStartDate,
					    ep_svc_accessPolicyExpiryDate;
				
				endif;
			}
			Parameter p_loc_permissionLength;
			StringParameter sp_loc_permission;
			StringParameter sp_loc_startDate;
			StringParameter sp_loc_expiryDate;
		}
		Procedure pr_svc_uponChangeDaysToExpire {
			Body: {
				sp_loc_startDate := SubString(dex::ExpiryDateFromNow(0[s]), 1, 17) + "00Z";
				ep_svc_startDate := StringToElement(c_days, sp_loc_startDate, 0);
				
				sp_loc_expiryDate := SubString(dex::ExpiryDateFromNow(p_svc_daysToExpire), 1, 17) + "00Z";
				ep_svc_expiryDate := StringToElement(c_days, sp_loc_expiryDate, 0);
			}
			StringParameter sp_loc_startDate;
			StringParameter sp_loc_expiryDate;
		}
		Procedure pr_svc_uponChangeStartDate {
			Body: {
				sp_loc_startDateDay := SubString(ep_svc_startDate, 1, 10);
				sp_loc_startDateHour := SubString(ep_svc_startDate, 12, 16);
				
				sp_loc_expiryDateDay 
				:=  MomentToString(
				        Format        :  "%c%y-%m-%d",
				        unit          :  day,
				        ReferenceDate :  sp_loc_startDateDay,
				        Elapsed       :  p_svc_daysToExpire);
				
				sp_loc_expiryDateComplete := sp_loc_expiryDateDay + "T" + sp_loc_startDateHour + ":00Z";
				ep_svc_expiryDate := StringToElement(c_days, sp_loc_expiryDateComplete, 0);
			}
			StringParameter sp_loc_startDateDay;
			StringParameter sp_loc_startDateHour;
			StringParameter sp_loc_expiryDateDay;
			StringParameter sp_loc_expiryDateComplete;
		}
		Procedure pr_svc_uponChangeExpiryDate {
			Body: {
				sp_loc_expiryDateDay := SubString(ep_svc_expiryDate, 1, 10);
				sp_loc_expiryDateHour := SubString(ep_svc_expiryDate, 12, 16);
				
				sp_loc_startDateDay 
				:=  MomentToString(
				        Format        :  "%c%y-%m-%d",
				        unit          :  day,
				        ReferenceDate :  sp_loc_expiryDateDay,
				        Elapsed       :  -p_svc_daysToExpire);
				
				sp_loc_startDateComplete := sp_loc_startDateDay + "T" + sp_loc_expiryDateHour + ":00Z";
				ep_svc_startDate := StringToElement(c_days, sp_loc_startDateComplete, 0);
			}
			StringParameter sp_loc_startDateDay;
			StringParameter sp_loc_startDateComplete;
			StringParameter sp_loc_expiryDateDay;
			StringParameter sp_loc_expiryDateHour;
		}
	}
	Section Account_SAS_Token {
		Set s_account_permissions {
			Index: i_acct_perm;
			Parameter: ep_acct_permission;
			Definition: data { r, w, d, x, y, l, a, c, u, p, t, f, i };
			Comment: {
				"\"r\" (Read)
				\"w\" (Write)
				\"d\" (Delete)
				\"x\" (DeleteVersion)
				\"y\" (PermanentDelete)
				\"l\" (List)
				\"a\" (Add)
				\"c\" (Create)
				\"u\" (Update)
				\"p\" (Process)
				\"t\" (Tag)
				\"f\" (Filter)
				\"i\" (SetImmutabilityPolicy)"
			}
		}
		Parameter bp_acct_permissionPossibilities {
			IndexDomain: i_acct_perm;
			Range: binary;
			webui::TooltipIdentifier: sp_acct_permissionTooltip(i_acct_perm);
		}
		Parameter p_acct_daysToExpire {
			Unit: day;
			webui::UponChangeProcedure: pr_acct_uponChangeDaysToExpire;
		}
		ElementParameter ep_acct_startDate {
			Range: c_days;
			webui::UponChangeProcedure: pr_acct_uponChangeStartDate;
		}
		ElementParameter ep_acct_expiryDate {
			Range: c_days;
			webui::UponChangeProcedure: pr_acct_uponChangeExpiryDate;
		}
		StringParameter sp_accountSASQueryString {
			webui::FlagsIdentifier: sp_def_readonly;
		}
		StringParameter sp_accountSASURL {
			webui::FlagsIdentifier: sp_def_readonly;
		}
		Procedure pr_createAccountSASQuery {
			Body: {
				s_loc_actions := {'OK'};
				
				if exists(i_acct_perm, bp_acct_permissionPossibilities(i_acct_perm))
				        and p_acct_daysToExpire
				        and ep_acct_startDate
				        and ep_acct_expiryDate then
				
				    for i_acct_perm | bp_acct_permissionPossibilities(i_acct_perm) do 
				        sp_loc_permission += i_acct_perm;
				    endfor;    
				
				    dex::dls::GetAccountSASQueryString(
				    	accountName :  'default',
				        queryString :  sp_accountSASQueryString, 
				        permissions :  sp_loc_permission, 
				        expiry      :  p_acct_daysToExpire);
				
				    sp_accountSASURL :=  FormatString("https://%s.blob.core.windows.net/?%s", dex::dls::StorageAccount, sp_accountSASQueryString);
				
				    webui::RequestPerformWebUIDialog(
				        title   :  "Account SAS Token", 
				        message :  "Sucessfully created a new account SAS token.", 
				        actions :  s_loc_actions, 
				        onDone  :  'webui::NoOp1');
				
				else 
				
				    webui::RequestPerformWebUIDialog(
				        title   :  "Missing Information", 
				        message :  "Please input all fields.", 
				        actions :  s_loc_actions, 
				        onDone  :  'webui::NoOp1');
				endif;
			}
			StringParameter sp_loc_permission;
			Set s_loc_actions;
		}
		Procedure pr_acct_uponChangeDaysToExpire {
			Body: {
				sp_loc_startDate := SubString(dex::ExpiryDateFromNow(0[s]), 1, 17) + "00Z";
				ep_acct_startDate := StringToElement(c_days, sp_loc_startDate, 0);
				
				sp_loc_expiryDate := SubString(dex::ExpiryDateFromNow(p_acct_daysToExpire), 1, 17) + "00Z";
				ep_acct_expiryDate := StringToElement(c_days, sp_loc_expiryDate, 0);
			}
			StringParameter sp_loc_startDate;
			StringParameter sp_loc_expiryDate;
		}
		Procedure pr_acct_uponChangeStartDate {
			Body: {
				sp_loc_startDateDay := SubString(ep_acct_startDate, 1, 10);
				sp_loc_startDateHour := SubString(ep_acct_startDate, 12, 16);
				
				sp_loc_expiryDateDay 
				:=  MomentToString(
				        Format        :  "%c%y-%m-%d",
				        unit          :  day,
				        ReferenceDate :  sp_loc_startDateDay,
				        Elapsed       :  p_acct_daysToExpire);
				
				sp_loc_expiryDateComplete := sp_loc_expiryDateDay + "T" + sp_loc_startDateHour + ":00Z";
				ep_acct_expiryDate := StringToElement(c_days, sp_loc_expiryDateComplete, 0);
			}
			StringParameter sp_loc_startDateDay;
			StringParameter sp_loc_startDateHour;
			StringParameter sp_loc_expiryDateDay;
			StringParameter sp_loc_expiryDateComplete;
		}
		Procedure pr_acct_uponChangeExpiryDate {
			Body: {
				sp_loc_expiryDateDay := SubString(ep_acct_expiryDate, 1, 10);
				sp_loc_expiryDateHour := SubString(ep_acct_expiryDate, 12, 16);
				
				sp_loc_startDateDay 
				:=  MomentToString(
				        Format        :  "%c%y-%m-%d",
				        unit          :  day,
				        ReferenceDate :  sp_loc_expiryDateDay,
				        Elapsed       :  -p_acct_daysToExpire);
				
				sp_loc_startDateComplete := sp_loc_startDateDay + "T" + sp_loc_expiryDateHour + ":00Z";
				ep_acct_startDate := StringToElement(c_days, sp_loc_startDateComplete, 0);
			}
			StringParameter sp_loc_startDateDay;
			StringParameter sp_loc_startDateComplete;
			StringParameter sp_loc_expiryDateDay;
			StringParameter sp_loc_expiryDateHour;
		}
	}
	Section Access_Policies {
		Set s_storedAccessPolicies {
			Index: i_pol;
			Parameter: ep_pol;
		}
		StringParameter sp_policyStart {
			IndexDomain: i_pol;
		}
		StringParameter sp_policyEnd {
			IndexDomain: i_pol;
		}
		StringParameter sp_policyPermission {
			IndexDomain: i_pol;
		}
		Procedure pr_getAccessPolicies {
			Arguments: ep_in_fileSystem;
			Body: {
				if (ep_in_fileSystem) then
				
					dex::dls::GetAccessPolicy(
				            fileSystem  :  ep_in_fileSystem, 
				            Ids         :  s_storedAccessPolicies, 
				            Start_      :  sp_policyStart(i_pol), 
				            Expiry      :  sp_policyEnd(i_pol), 
				            Permission  :  sp_policyPermission(i_pol));
				
					empty sp_containerSASQueryString, sp_containerSASURL;
				endif;
			}
			ElementParameter ep_in_fileSystem {
				Range: s_fileSystems;
				Property: Input;
			}
		}
		Procedure pr_setAccessPolicies {
			Arguments: ep_in_fileSystem;
			Body: {
				if (ep_in_fileSystem) then
				
					dex::dls::SetAccessPolicy(
				            fileSystem  :  ep_in_fileSystem, 
				            Ids         :  s_storedAccessPolicies, 
				            Start_      :  sp_policyStart(i_pol), 
				            Expiry      :  sp_policyEnd(i_pol), 
				            Permission  :  sp_policyPermission(i_pol));
				
					pr_getAccessPolicies(ep_in_fileSystem : ep_in_fileSystem);
				endif;
			}
			ElementParameter ep_in_fileSystem {
				Range: s_fileSystems;
				Property: Input;
			}
		}
	}
	Section UI_Declarations {
		StringParameter sp_def_readonly {
			Definition: "readonly";
		}
		Section Workflow {
			StringParameter sp_def_myWorkflowSteps {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexNoOfPages,webui::indexWorkflowPageSpec);
				Definition: {
					data 
					{ ( 1, 1, displayText       ) : "Welcome",
					  ( 1, 1, icon              ) : "aimms-happy",
					  ( 1, 1, pageId            ) : "home",
					  ( 1, 1, tooltip           ) : "Welcome to the Toolkit!",
					  ( 1, 1, workflowPageState ) : "active",
					  ( 1, 1, pageDataState     ) : "Incomplete",
					  ( 1, 2, displayText       ) : "Container SAS Token",
					  ( 1, 2, icon              ) : "aimms-cube4",
					  ( 1, 2, pageId            ) : "container_sas_token",
					  ( 1, 2, tooltip           ) : "Create your Container SAS Token",
					  ( 1, 2, workflowPageState ) : "active",
					  ( 1, 2, pageDataState     ) : "incomplete",
					  ( 1, 2, redirectPageId    ) : "home",
					  ( 1, 3, displayText       ) : "Account SAS Token",
					  ( 1, 3, icon              ) : "aimms-user5",
					  ( 1, 3, pageId            ) : "new_sas_token",
					  ( 1, 3, tooltip           ) : "Create your Account SAS Token",
					  ( 1, 3, workflowPageState ) : "inactive",
					  ( 1, 3, pageDataState     ) : "incomplete",
					  ( 1, 3, redirectPageId    ) : "home" }
				}
			}
		}
		Section Status_Bar {
			StringParameter sp_def_myStatusBar {
				IndexDomain: (webui::indexApplicationExtension,webui::indexStatusBarSpec);
				Definition: {
					{   ( '1', 'header'  ) : "Storage Account:"                    ,
					    ( '1', 'text'    ) : dex::dls::StorageAccount             ,
					    ( '1', 'tooltip' ) : "This is the current Storage Account",  
					    ( '1', 'state'   ) : "active"                              }
				}
			}
			StringParameter sp_def_storageAccount {
				Definition: dex::dls::StorageAccount;
			}
		}
		Section Pages {
			Section Welcome_Page {
				StringParameter sp_def_logo {
					Definition: "aimms_logo.png";
				}
			}
			Section Container_SAS_Token_Page {
				StringParameter sp_svc_permissionTooltip {
					IndexDomain: i_svc_perm;
					Definition: {
						data 
						{ r : "Read the content, blocklist, properties, and metadata of any blob in the container or directory. Use a blob as the source"
						      " of a copy operation.",
						  a : "Add a block to an append blob.",
						  c : "Write a new blob, snapshot a blob, or copy a blob to a new blob.",
						  w : "Create or write content, properties, metadata, or blocklist. Snapshot or lease the blob. Resize the blob (page blob only)"
						      ". Use the blob as the destination of a copy operation.",
						  d : "Delete a blob. For version 2017-07-29 and later, the Delete permission also allows breaking a lease on a blob. For more i"
						      "nformation, see the Lease Blob operation.",
						  x : "Delete a blob version.",
						  y : "Permanently delete a blob snapshot or version.",
						  l : "List blobs non-recursively.",
						  t : "Read or write the tags on a blob.",
						  f : "Find blobs with index tags.",
						  m : "Move a blob or a directory and its contents to a new location. This operation can optionally be restricted to the owner o"
						      "f the child blob, directory, or parent directory if the saoid parameter is included on the SAS token and the sticky bit i"
						      "s set on the parent directory.",
						  e : "Get the system properties and, if the hierarchical namespace is enabled for the storage account, get the POSIX ACL of a b"
						      "lob. If the hierarchical namespace is enabled and the caller is the owner of a blob, this permission grants the ability t"
						      "o set the owning group, POSIX permissions, and POSIX ACL of the blob. doesn't permit the caller to read user-defined meta"
						      "data.",
						  o : "When the hierarchical namespace is enabled, this permission enables the caller to set the owner or the owning group, or t"
						      "o act as the owner when renaming or deleting a directory or blob within a directory that has the sticky bit set.",
						  p : "When the hierarchical namespace is enabled, this permission allows the caller to set permissions and POSIX ACLs on direct"
						      "ories and blobs.",
						  i : "Set or delete the immutability policy or legal hold on a blob." }
					}
				}
				StringParameter sp_def_tabbedManagePages {
					IndexDomain: (webui::indexNoOfTabs,webui::indexTabSpec);
					Definition: {
						data 
						{ ( 1, displayText ) : "Manage Access Policy",  ( 1, pageId      ) : "manage_access_policy",
						  ( 1, state       ) : "active"              ,  ( 2, displayText ) : "Manage File System"  ,
						  ( 2, pageId      ) : "manage_file_system"  ,  ( 2, state       ) : "active"               }
					}
				}
			}
			Section Account_SAS_Token_Page {
				StringParameter sp_acct_permissionTooltip {
					IndexDomain: i_acct_perm;
					Definition: {
						data 
						{ r : "Read: Valid for all signed resources types (Service, Container, and Object). Permits read permissions to the specified re"
						      "source type.",
						  w : "Write: Valid for all signed resources types (Service, Container, and Object). Permits write access for the specified reso"
						      "urce type, allowing a user to create and update resources.",
						  d : "Delete: Valid for Container and Object resource types, except for queue messages.",
						  x : "Delete Version: Valid for Object resource type of Blob only.",
						  y : "Permanent Delete: Valid for Object resource type of Blob only.",
						  l : "List: Valid for Service and Container resource types only.",
						  a : "Add: Valid for the following Object resource types only: queue messages, table entities, and append blobs.",
						  c : "Create: Valid for Container resource types and the following Object resource types: blobs and files. Users can create new"
						      " resources, but may not overwrite existing resources.",
						  u : "Update: Valid for the following Object resource types only: queue messages and table entities.",
						  p : "Process: Valid for the following Object resource type only: queue messages.",
						  t : "Tag: Valid for the following Object resource type only: blobs. Permits blob tag operations.",
						  f : "Filter: Valid for the following Object resource type only: blob. Permits filtering by blob tag.",
						  i : "Set Immutability Policy: Valid for the following Object resource type only: blob. Permits set/delete immutability policy "
						      "and legal hold on a blob." }
					}
				}
			}
		}
	}
	Procedure MainInitialization {
		Comment: "Add initialization statements here that do NOT require any library being initialized already.";
	}
	Procedure PostMainInitialization {
		Comment: {
			"Add initialization statements here that require that the libraries are already initialized properly,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure MainExecution;
	Procedure PreMainTermination {
		Body: {
			return DataManagementExit();
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
}
