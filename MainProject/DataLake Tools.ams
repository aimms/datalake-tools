## ams_version=1.0

Model Main_DataLake_Tools {
	Section SAS_Token_Toolkit {
		Set s_def_permissions {
			Index: i_perm;
			Parameter: ep_permission;
			Definition: {
				{'c', 'r', 'w', 'd', 'y', 'l', 'a', 'u', 'p', 't', 'f', 'i'}
			}
		}
		Set s_fileSystems {
			Index: i_file_sys;
			Parameter: ep_fileSystem;
		}
		Parameter bp_permissionPossibilities {
			IndexDomain: i_perm;
			Range: binary;
			webui::TooltipIdentifier: sp_permissionTooltip(i_perm);
		}
		StringParameter sp_def_storageAccount {
			Definition: dex::dls::StorageAccount;
		}
		Parameter p_secondsToExpire {
			Unit: s;
			Default: 600;
		}
		StringParameter sp_SASQueryString {
			webui::FlagsIdentifier: sp_def_readonly;
		}
		Procedure pr_createAccountSASQuery {
			Body: {
				if sum(i_perm, bp_permissionPossibilities(i_perm)) then
				    for i_perm | bp_permissionPossibilities(i_perm) do 
				        sp_loc_permission += i_perm;
				    endfor;    
				
				    dex::dls::GetAccountSASQueryString(
				        queryString :  sp_SASQueryString, 
				        permissions :  sp_loc_permission, 
				        expiry      :  p_secondsToExpire);
				else 
				    s_loc_actions := {'OK'};
				
				    webui::RequestPerformWebUIDialog(
				        title   :  "Missing Information", 
				        message :  "Please select at least one permission.", 
				        actions :  s_loc_actions, 
				        onDone  :  'webui::NoOp1');
				endif;
			}
			StringParameter sp_loc_permission;
			Set s_loc_actions;
		}
		Procedure pr_createContainerSASQuery {
			Body: {
				if sum(i_perm, bp_permissionPossibilities(i_perm)) and ep_fileSystem then
				    for i_perm | bp_permissionPossibilities(i_perm) do 
				        sp_loc_permission += i_perm;
				    endfor;    
				
				    dex::dls::GetContainerSASQueryString(
				        queryString        :  sp_SASQueryString, 
				        fileSystem         :  ep_fileSystem, 
				        permissions        :  sp_loc_permission, 
				        expiry             :  p_secondsToExpire);
				else 
				    s_loc_actions := {'OK'};
				
				    if not sum(i_perm, bp_permissionPossibilities(i_perm)) and not ep_fileSystem then 
				        webui::RequestPerformWebUIDialog(
				            title   :  "Missing Information", 
				            message :  "Please select at least one permission and a File System.", 
				            actions :  s_loc_actions, 
				            onDone  :  'webui::NoOp1');
				
				    elseif not sum(i_perm, bp_permissionPossibilities(i_perm)) then
				        webui::RequestPerformWebUIDialog(
				            title   :  "Missing Information", 
				            message :  "Please select at least one permission.", 
				            actions :  s_loc_actions, 
				            onDone  :  'webui::NoOp1');
				
				    elseif not ep_fileSystem then
				        webui::RequestPerformWebUIDialog(
				            title   :  "Missing Information", 
				            message :  "Please select a File System.", 
				            actions :  s_loc_actions, 
				            onDone  :  'webui::NoOp1');
				
				    endif;                    
				endif;
			}
			StringParameter sp_loc_permission;
			Set s_loc_actions;
		}
		Procedure pr_fetchFileSystem {
			Body: {
				dex::dls::ListFileSystems(s_fileSystems);
			}
		}
	}
	Section UI_Declarations {
		StringParameter sp_def_readonly {
			Definition: "readonly";
		}
		Section Workflow {
			StringParameter sp_def_myWorkflowSteps {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexNoOfPages,webui::indexWorkflowPageSpec);
				Definition: {
					data 
					{ ( 1, 1, displayText       ) : "Welcome",
					  ( 1, 1, icon              ) : "aimms-happy",
					  ( 1, 1, pageId            ) : "home",
					  ( 1, 1, tooltip           ) : "Welcome to the Toolkit!",
					  ( 1, 1, workflowPageState ) : "active",
					  ( 1, 1, pageDataState     ) : "Incomplete",
					  ( 1, 2, displayText       ) : "Account SAS Token",
					  ( 1, 2, icon              ) : "aimms-user5",
					  ( 1, 2, pageId            ) : "new_sas_token",
					  ( 1, 2, tooltip           ) : "Create your Account SAS Token",
					  ( 1, 2, workflowPageState ) : "active",
					  ( 1, 2, pageDataState     ) : "incomplete",
					  ( 1, 2, redirectPageId    ) : "home",
					  ( 1, 3, displayText       ) : "Container SAS Token",
					  ( 1, 3, icon              ) : "aimms-cube4",
					  ( 1, 3, pageId            ) : "container_sas_token",
					  ( 1, 3, tooltip           ) : "Create your Container SAS Token",
					  ( 1, 3, workflowPageState ) : "active",
					  ( 1, 3, pageDataState     ) : "incomplete",
					  ( 1, 3, redirectPageId    ) : "home" }
				}
			}
		}
		Section Status_Bar {
			StringParameter sp_def_myStatusBar {
				IndexDomain: (webui::indexApplicationExtension,webui::indexStatusBarSpec);
				Definition: {
					{   ( '1', 'header'  ) : "Storage Account:"                    ,
					    ( '1', 'text'    ) : dex::dls::StorageAccount             ,
					    ( '1', 'tooltip' ) : "This is the current Storage Account",  
					    ( '1', 'state'   ) : "active"                              }
				}
			}
		}
		Section Pages {
			Section Welcome_Page {
				StringParameter sp_def_logo {
					Definition: "aimms_logo.png";
				}
			}
			StringParameter sp_permissionTooltip {
				IndexDomain: i_perm;
				Definition: {
					data 
					{ c : "Create (c): Valid for Container resource types and the following Object resource types: blobs and files. Users can create"
					      " new resources, but may not overwrite existing resources.",
					  r : "Read (r): Valid for all signed resources types (Service, Container, and Object). Permits read permissions to the specifie"
					      "d resource type.",
					  w : "Write (w): Valid for all signed resources types (Service, Container, and Object). Permits write access for the specified "
					      "resource type, allowing a user to create and update resources.",
					  d : "Delete (d): Valid for Container and Object resource types, except for queue messages.",
					  y : "Permanent Delete (y): Valid for Object resource type of Blob only.",
					  l : "List (l): Valid for Service and Container resource types only.",
					  a : "Add (a): Valid for the following Object resource types only: queue messages, table entities, and append blobs.",
					  u : "Update (u): Valid for the following Object resource types only: queue messages and table entities.",
					  p : "Process (p): Valid for the following Object resource type only: queue messages.",
					  t : "Tag (t): Valid for the following Object resource type only: blobs. Permits blob tag operations.",
					  f : "Filter (f): Valid for the following Object resource type only: blob. Permits filtering by blob tag.",
					  i : "Set Immutability Policy (i): Valid for the following Object resource type only: blob. Permits set/delete immutability pol"
					      "icy and legal hold on a blob." }
				}
			}
		}
	}
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: {
				minute->s : #-># * 60,
				hour->s : #-># * 3600,
				month->s : #-># * 2628000
			}
			Comment: {
				"Expresses the value for the duration of periods.
				
				The unit s has been added automatically because it is a required unit for AimmsWebUI.
				
				The unit minute has been added automatically because it is a required unit for AimmsWebUI.
				
				The unit hour has been added automatically because it is a required unit for Library GuardServerSession.
				
				The unit month has been added automatically because it is a required unit for Library GuardServerSession."
			}
		}
	}
	Procedure MainInitialization {
		Comment: "Add initialization statements here that do NOT require any library being initialized already.";
	}
	Procedure PostMainInitialization {
		Body: {
			pr_fetchFileSystem;
		}
		Comment: {
			"Add initialization statements here that require that the libraries are already initialized properly,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure MainExecution;
	Procedure PreMainTermination {
		Body: {
			return DataManagementExit();
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
}
