## ams_version=1.0

Model Main_DataLake_Tools {
	Section SAS_Token_Toolkit {
		Set s_def_permissions {
			Index: i_perm;
			Parameter: ep_permission;
			Definition: {
				{'r', 'a', 'c', 'w', 'd', 'x', 'l', 't', 'm', 'e', 'o', 'p'}
			}
		}
		Set s_fileSystems {
			Index: i_file_sys;
			Parameter: ep_fileSystem;
		}
		Parameter bp_selectedFileSystems {
			IndexDomain: i_file_sys;
		}
		Parameter bp_permissionPossibilities {
			IndexDomain: i_perm;
			Range: binary;
			webui::TooltipIdentifier: sp_permissionTooltip(i_perm);
		}
		StringParameter sp_def_storageAccount {
			Definition: dex::dls::StorageAccount;
		}
		Parameter p_secondsToExpire {
			Unit: s;
		}
		Parameter p_daysToExpire {
			Unit: day;
		}
		StringParameter sp_accountSASQueryString {
			webui::FlagsIdentifier: sp_def_readonly;
		}
		StringParameter sp_accountSASURL;
		StringParameter sp_containerSASQueryString {
			webui::FlagsIdentifier: sp_def_readonly;
		}
		StringParameter sp_containerSASURL;
		StringParameter sp_fileSystem;
		Procedure pr_createAccountSASQuery {
			Body: {
				if sum(i_perm, bp_permissionPossibilities(i_perm)) then
				    for i_perm | bp_permissionPossibilities(i_perm) do 
				        sp_loc_permission += i_perm;
				    endfor;    
				
					p_secondsToExpire := if (p_daysToExpire) then p_daysToExpire else p_secondsToExpire endif;
				
				    if p_secondsToExpire = 0 then
				        s_loc_actions := {'OK'};
				
				        webui::RequestPerformWebUIDialog(
				            title   :  "Missing Information", 
				            message :  "Please set an expiration.", 
				            actions :  s_loc_actions, 
				            onDone  :  'webui::NoOp1');
				    else
				
				        dex::dls::GetAccountSASQueryString(
				            queryString :  sp_accountSASQueryString, 
				            permissions :  sp_loc_permission, 
				            expiry      :  p_secondsToExpire);
				
				        sp_accountSASURL 
				        :=  FormatString("https://%s.blob.core.windows.net/?%s", dex::dls::StorageAccount, sp_accountSASQueryString);
				
				    endif;    
				else 
				    s_loc_actions := {'OK'};
				
				    webui::RequestPerformWebUIDialog(
				        title   :  "Missing Information", 
				        message :  "Please select at least one permission.", 
				        actions :  s_loc_actions, 
				        onDone  :  'webui::NoOp1');
				endif;
			}
			StringParameter sp_loc_permission;
			Set s_loc_actions;
			Parameter expiry {
				Unit: s;
			}
		}
		Procedure pr_createContainerSASQuery {
			Body: {
				if sum(i_perm, bp_permissionPossibilities(i_perm)) and ep_fileSystem then
				    for i_perm | bp_permissionPossibilities(i_perm) do 
				        sp_loc_permission += i_perm;
				    endfor;    
				
					p_secondsToExpire := if (p_daysToExpire) then p_daysToExpire else p_secondsToExpire endif;
				
				    if p_secondsToExpire = 0 then
				        s_loc_actions := {'OK'};
				
				        webui::RequestPerformWebUIDialog(
				            title   :  "Missing Information", 
				            message :  "Please set an expiration.", 
				            actions :  s_loc_actions, 
				            onDone  :  'webui::NoOp1');
				    else
				
				        dex::dls::GetContainerSASQueryString(
				            queryString        :  sp_containerSASQueryString, 
				            fileSystem         :  ep_fileSystem, 
				            permissions        :  sp_loc_permission, 
				            expiry             :  p_secondsToExpire);
				
				        sp_containerSASURL 
				        :=  FormatString("https://%s.blob.core.windows.net/%e?%s", dex::dls::StorageAccount, ep_fileSystem, sp_containerSASQueryString);
				
				    endif;
				else 
				    s_loc_actions := {'OK'};
				
				    if not sum(i_perm, bp_permissionPossibilities(i_perm)) and not ep_fileSystem then 
				        webui::RequestPerformWebUIDialog(
				            title   :  "Missing Information", 
				            message :  "Please select at least one permission and a File System.", 
				            actions :  s_loc_actions, 
				            onDone  :  'webui::NoOp1');
				
				    elseif not sum(i_perm, bp_permissionPossibilities(i_perm)) then
				        webui::RequestPerformWebUIDialog(
				            title   :  "Missing Information", 
				            message :  "Please select at least one permission.", 
				            actions :  s_loc_actions, 
				            onDone  :  'webui::NoOp1');
				
				    elseif not ep_fileSystem then
				        webui::RequestPerformWebUIDialog(
				            title   :  "Missing Information", 
				            message :  "Please select a File System.", 
				            actions :  s_loc_actions, 
				            onDone  :  'webui::NoOp1');
				
				    endif;                    
				endif;
			}
			StringParameter sp_loc_permission;
			Set s_loc_actions;
		}
		Procedure pr_fetchFileSystems {
			Body: {
				dex::dls::ListFileSystems(s_fileSystems);
			}
		}
		Procedure pr_createFileSystem {
			Body: {
				dex::dls::CreateFileSystem(StringToLower(sp_fileSystem));
				pr_fetchFileSystems;
			}
		}
		Procedure pr_deleteSelectedFileSystems {
			Body: {
				for (i_file_sys | bp_selectedFileSystems(i_file_sys)) do
					dex::dls::DeleteFileSystem(i_file_sys);
				endfor;
				pr_fetchFileSystems;
			}
		}
	}
	Section UI_Declarations {
		StringParameter sp_def_readonly {
			Definition: "readonly";
		}
		Section Workflow {
			StringParameter sp_def_myWorkflowSteps {
				IndexDomain: (webui::indexWorkflowOrder,webui::indexNoOfPages,webui::indexWorkflowPageSpec);
				Definition: {
					data 
					{ ( 1, 1, displayText       ) : "Welcome",
					  ( 1, 1, icon              ) : "aimms-happy",
					  ( 1, 1, pageId            ) : "home",
					  ( 1, 1, tooltip           ) : "Welcome to the Toolkit!",
					  ( 1, 1, workflowPageState ) : "active",
					  ( 1, 1, pageDataState     ) : "Incomplete",
					  ( 1, 2, displayText       ) : "Account SAS Token",
					  ( 1, 2, icon              ) : "aimms-user5",
					  ( 1, 2, pageId            ) : "new_sas_token",
					  ( 1, 2, tooltip           ) : "Create your Account SAS Token",
					  ( 1, 2, workflowPageState ) : "active",
					  ( 1, 2, pageDataState     ) : "incomplete",
					  ( 1, 2, redirectPageId    ) : "home",
					  ( 1, 3, displayText       ) : "Container SAS Token",
					  ( 1, 3, icon              ) : "aimms-cube4",
					  ( 1, 3, pageId            ) : "container_sas_token",
					  ( 1, 3, tooltip           ) : "Create your Container SAS Token",
					  ( 1, 3, workflowPageState ) : "active",
					  ( 1, 3, pageDataState     ) : "incomplete",
					  ( 1, 3, redirectPageId    ) : "home" }
				}
			}
		}
		Section Status_Bar {
			StringParameter sp_def_myStatusBar {
				IndexDomain: (webui::indexApplicationExtension,webui::indexStatusBarSpec);
				Definition: {
					{   ( '1', 'header'  ) : "Storage Account:"                    ,
					    ( '1', 'text'    ) : dex::dls::StorageAccount             ,
					    ( '1', 'tooltip' ) : "This is the current Storage Account",  
					    ( '1', 'state'   ) : "active"                              }
				}
			}
		}
		Section Pages {
			Section Welcome_Page {
				StringParameter sp_def_logo {
					Definition: "aimms_logo.png";
				}
			}
			StringParameter sp_permissionTooltip {
				IndexDomain: i_perm;
				Definition: {
					data 
					{ r : "Read the content, blocklist, properties, and metadata of any blob in the container or directory. Use a blob as the source of a copy operation.",
					  a : "Add a block to an append blob.",
					  c : "Write a new blob, snapshot a blob, or copy a blob to a new blob.",
					  w : "Create or write content, properties, metadata, or blocklist. Snapshot or lease the blob. Resize the blob (page blob only). Use the blob as the destination of a copy operation.",
					  d : "Delete a blob. For version 2017-07-29 and later, the Delete permission also allows breaking a lease on a blob. For more information, see the Lease Blob operation.",
					  x : "Delete a blob version.",
					  l : "List blobs non-recursively.",
					  t : "Read or write the tags on a blob.",
					  m : "Move a blob or a directory and its contents to a new location. This operation can optionally be restricted to the owner of the child blob, directory, or parent directory if the saoid parameter is included on the SAS token and the sticky bit is set on the parent directory.",
					  e : "Get the system properties and, if the hierarchical namespace is enabled for the storage account, get the POSIX ACL of a blob. If the hierarchical namespace is enabled and the caller is the owner of a blob, this permission grants the ability to set the owning group, POSIX permissions, and POSIX ACL of the blob. doesn't permit the caller to read user-defined metadata.",
					  o : "When the hierarchical namespace is enabled, this permission enables the caller to set the owner or the owning group, or to act as the owner when renaming or deleting a directory or blob within a directory that has the sticky bit set.",
					  p : "When the hierarchical namespace is enabled, this permission allows the caller to set permissions and POSIX ACLs on directories and blobs." }
				}
			}
		}
	}
	Section Quantities_and_Units {
		Comment: {
			"This section contains all the units and quantities that are added automatically by AIMMS.
			It is recommended to declare all your quantities here."
		}
		Quantity SI_Time_Duration {
			BaseUnit: s;
			Conversions: {
				minute->s : #-># * 60,
				hour->s : #-># * 3600,
				month->s : #-># * 2628000,
				day->s : #-># * 86400,
				year->s : #-># * 31536000
			}
		}
	}
	Procedure MainInitialization {
		Comment: "Add initialization statements here that do NOT require any library being initialized already.";
	}
	Procedure PostMainInitialization {
		Comment: {
			"Add initialization statements here that require that the libraries are already initialized properly,
			or add statements that require the Data Management module to be initialized."
		}
	}
	Procedure MainExecution;
	Procedure PreMainTermination {
		Body: {
			return DataManagementExit();
		}
		Comment: {
			"Add termination statements here that require all libraries to be still alive.
			Return 1 if you allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence."
		}
	}
	Procedure MainTermination {
		Body: {
			return 1;
		}
		Comment: {
			"Add termination statements here that do not require all libraries to be still alive.
			Return 1 to allow the termination sequence to continue.
			Return 0 if you want to cancel the termination sequence.
			It is recommended to only use the procedure PreMainTermination to cancel the termination sequence and let this procedure always return 1."
		}
	}
}
